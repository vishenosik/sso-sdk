// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: authorization.proto

package authorization_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Authorization_AddRoles_FullMethodName      = "/authorization.v1.Authorization/AddRoles"
	Authorization_RemoveRoles_FullMethodName   = "/authorization.v1.Authorization/RemoveRoles"
	Authorization_Roles_FullMethodName         = "/authorization.v1.Authorization/Roles"
	Authorization_HasRole_FullMethodName       = "/authorization.v1.Authorization/HasRole"
	Authorization_RolesAssigned_FullMethodName = "/authorization.v1.Authorization/RolesAssigned"
	Authorization_AssignRoles_FullMethodName   = "/authorization.v1.Authorization/AssignRoles"
	Authorization_RevokeRoles_FullMethodName   = "/authorization.v1.Authorization/RevokeRoles"
)

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	AddRoles(ctx context.Context, in *AddRolesRequest, opts ...grpc.CallOption) (*AddRolesResponse, error)
	RemoveRoles(ctx context.Context, in *RemoveRolesRequest, opts ...grpc.CallOption) (*RemoveRolesResponse, error)
	Roles(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*RolesResponse, error)
	HasRole(ctx context.Context, in *HasRoleRequest, opts ...grpc.CallOption) (*HasRoleResponse, error)
	RolesAssigned(ctx context.Context, in *RolesAssignedRequest, opts ...grpc.CallOption) (*RolesAssignedResponse, error)
	AssignRoles(ctx context.Context, in *AssignRolesRequest, opts ...grpc.CallOption) (*AssignRolesResponse, error)
	RevokeRoles(ctx context.Context, in *RevokeRolesRequest, opts ...grpc.CallOption) (*RevokeRolesResponse, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) AddRoles(ctx context.Context, in *AddRolesRequest, opts ...grpc.CallOption) (*AddRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRolesResponse)
	err := c.cc.Invoke(ctx, Authorization_AddRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RemoveRoles(ctx context.Context, in *RemoveRolesRequest, opts ...grpc.CallOption) (*RemoveRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRolesResponse)
	err := c.cc.Invoke(ctx, Authorization_RemoveRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) Roles(ctx context.Context, in *RolesRequest, opts ...grpc.CallOption) (*RolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RolesResponse)
	err := c.cc.Invoke(ctx, Authorization_Roles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) HasRole(ctx context.Context, in *HasRoleRequest, opts ...grpc.CallOption) (*HasRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasRoleResponse)
	err := c.cc.Invoke(ctx, Authorization_HasRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RolesAssigned(ctx context.Context, in *RolesAssignedRequest, opts ...grpc.CallOption) (*RolesAssignedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RolesAssignedResponse)
	err := c.cc.Invoke(ctx, Authorization_RolesAssigned_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AssignRoles(ctx context.Context, in *AssignRolesRequest, opts ...grpc.CallOption) (*AssignRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignRolesResponse)
	err := c.cc.Invoke(ctx, Authorization_AssignRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RevokeRoles(ctx context.Context, in *RevokeRolesRequest, opts ...grpc.CallOption) (*RevokeRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeRolesResponse)
	err := c.cc.Invoke(ctx, Authorization_RevokeRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility.
type AuthorizationServer interface {
	AddRoles(context.Context, *AddRolesRequest) (*AddRolesResponse, error)
	RemoveRoles(context.Context, *RemoveRolesRequest) (*RemoveRolesResponse, error)
	Roles(context.Context, *RolesRequest) (*RolesResponse, error)
	HasRole(context.Context, *HasRoleRequest) (*HasRoleResponse, error)
	RolesAssigned(context.Context, *RolesAssignedRequest) (*RolesAssignedResponse, error)
	AssignRoles(context.Context, *AssignRolesRequest) (*AssignRolesResponse, error)
	RevokeRoles(context.Context, *RevokeRolesRequest) (*RevokeRolesResponse, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorizationServer struct{}

func (UnimplementedAuthorizationServer) AddRoles(context.Context, *AddRolesRequest) (*AddRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoles not implemented")
}
func (UnimplementedAuthorizationServer) RemoveRoles(context.Context, *RemoveRolesRequest) (*RemoveRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoles not implemented")
}
func (UnimplementedAuthorizationServer) Roles(context.Context, *RolesRequest) (*RolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Roles not implemented")
}
func (UnimplementedAuthorizationServer) HasRole(context.Context, *HasRoleRequest) (*HasRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasRole not implemented")
}
func (UnimplementedAuthorizationServer) RolesAssigned(context.Context, *RolesAssignedRequest) (*RolesAssignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolesAssigned not implemented")
}
func (UnimplementedAuthorizationServer) AssignRoles(context.Context, *AssignRolesRequest) (*AssignRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoles not implemented")
}
func (UnimplementedAuthorizationServer) RevokeRoles(context.Context, *RevokeRolesRequest) (*RevokeRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRoles not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}
func (UnimplementedAuthorizationServer) testEmbeddedByValue()                       {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	// If the following call pancis, it indicates UnimplementedAuthorizationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_AddRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_AddRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddRoles(ctx, req.(*AddRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RemoveRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RemoveRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RemoveRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RemoveRoles(ctx, req.(*RemoveRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_Roles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Roles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_Roles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Roles(ctx, req.(*RolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_HasRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).HasRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_HasRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).HasRole(ctx, req.(*HasRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RolesAssigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesAssignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RolesAssigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RolesAssigned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RolesAssigned(ctx, req.(*RolesAssignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AssignRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AssignRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_AssignRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AssignRoles(ctx, req.(*AssignRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RevokeRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RevokeRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authorization_RevokeRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RevokeRoles(ctx, req.(*RevokeRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authorization.v1.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRoles",
			Handler:    _Authorization_AddRoles_Handler,
		},
		{
			MethodName: "RemoveRoles",
			Handler:    _Authorization_RemoveRoles_Handler,
		},
		{
			MethodName: "Roles",
			Handler:    _Authorization_Roles_Handler,
		},
		{
			MethodName: "HasRole",
			Handler:    _Authorization_HasRole_Handler,
		},
		{
			MethodName: "RolesAssigned",
			Handler:    _Authorization_RolesAssigned_Handler,
		},
		{
			MethodName: "AssignRoles",
			Handler:    _Authorization_AssignRoles_Handler,
		},
		{
			MethodName: "RevokeRoles",
			Handler:    _Authorization_RevokeRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization.proto",
}
